<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "/usr/local/sgml/docbook-xml-4.5/docbookx.dtd" [
<!ENTITY % entities SYSTEM "../../ProxCommonEntities.ent">
<!ENTITY % recipeentities SYSTEM "ProxCookbookEntities.ent">
%entities;
%recipeentities;
<!ENTITY gCol '<varname>G</varname>'>
<!ENTITY vCol '<varname>V</varname>'>
]>

<!-- Part of the open-source Proximity system (see LICENSE for
     copyright and license information).
-->


<!-- CHAPTER: Database Manipulation -->

<!-- ============================================================== -->
<!--                            RECIPE:                             -->
<!--                   CREATING A DEGREE ATTRIBUTE                  -->
<!-- ============================================================== -->

<section id="recipe_degreeattr">
<title>Creating a Degree Attribute</title>

<!-- All index terms at top -->
<indexterm><primary>aggregation</primary></indexterm>
<indexterm><primary>NSTs</primary>
           <secondary>aggregation in</secondary></indexterm>
<indexterm><primary>summarizing</primary>
           <see>aggregation</see></indexterm>
<indexterm><primary>distinct values</primary>
           <secondary>aggregation operator for</secondary></indexterm>
<indexterm><primary>degree of a node</primary></indexterm>
<indexterm><primary>in degree</primary>
           <secondary>computing using aggregation</secondary></indexterm>
<indexterm><primary>out degree</primary>
           <secondary>computing using aggregation</secondary></indexterm>
<indexterm><primary>count aggregation operator</primary></indexterm>
<indexterm><primary>card aggregation operator</primary></indexterm>
<indexterm><primary>grouping</primary>
           <see>aggregation</see></indexterm>
<indexterm><primary>IDs</primary>
           <secondary>aggregating by</secondary></indexterm>
<indexterm><primary>objects</primary>
           <secondary>computing degree</secondary></indexterm>
<indexterm><primary>creating</primary>
           <secondary>attributes</secondary></indexterm>
<indexterm><primary>attributes</primary>
           <secondary>creating</secondary></indexterm>
<indexterm><primary>NSTs</primary>
           <secondary>renaming columns</secondary></indexterm>
<indexterm><primary>renaming</primary>
           <secondary>NST columns</secondary></indexterm>
<indexterm><primary>attributes</primary>
           <secondary>NSTs for</secondary></indexterm>
<indexterm><primary>NSTs</primary>
           <secondary sortas="attribute values">for attribute values</secondary></indexterm>

<!-- classes used in the recipe -->
<indexterm><primary>DB class</primary></indexterm>
<indexterm><primary>classes</primary>
           <secondary>DB</secondary></indexterm>

<!-- methods used in this recipe -->
<indexterm><primary>aggregate()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>aggregate</secondary></indexterm>
<indexterm><primary>renameColumn()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>renameColumn</secondary></indexterm>
<indexterm><primary>project()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>project()</secondary></indexterm>
<indexterm><primary>join()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>join</secondary></indexterm>
<indexterm><primary>getLinks()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>getLinks</secondary></indexterm>
<indexterm><primary>getObjects()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>getObjects</secondary></indexterm>
<indexterm><primary>defineAttributeWithData()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>defineAttributeWithData</secondary></indexterm>
<indexterm><primary>insertRowsFromNST()</primary></indexterm>
<indexterm><primary>methods</primary>
           <secondary>insertRowsFromNST</secondary></indexterm>

<!-- ============================================================== -->
<!-- PROBLEM                                                        -->
<!-- ============================================================== -->

<section>
<title>Problem</title>

<para>When working with relational data, you often want to know the
degree of a node in the graph (an object in Proximity).  This recipe
demonstrates how to calculate the degree of an object and store that
value as an attribute on the object.</para>

</section>

<!-- ============================================================== -->
<!-- SOLUTION                                                        -->
<!-- ============================================================== -->

<section>
<title>Solution</title>

<para>Suppose you have a database like the one shown in the following
fragment:
<informalfigure>
<mediaobject>
<imageobject role="fo">
   <imagedata valign="bottom" align="center"
   fileref="&graphicspath;/DBManip_AddDegreeAttr_DB.png"
   format="PNG"
   width="4.4in" />
</imageobject>
<imageobject role="html">
    <imagedata align="center" valign="bottom"
    fileref="&graphicspath;/DBManip_AddDegreeAttr_DB.png"
    contentwidth="5.35in"
    format="PNG" />
</imageobject>
</mediaobject>
</informalfigure>
</para>

<para>The example database contains actors and movies.  Actors are
linked to the movies they&rsquo;ve appeared in by 
<token role="attr">ActedIn</token> links, and
actors that have appeared in the same movie are connected by a pair of
<token role="attr">CollaboratedWith</token> links, one in each
direction.  In the fragment shown above, both Christopher Guest and
Harry Shearer appeared in <citetitle>This is Spinal Tap</citetitle>,
so there is a pair of <token role="attr">CollaboratedWith</token>
links connecting the actors.</para>

<para>The recipe in <xref linkend="recipe_aggregation01" /> showed us
how to use the &aggregateMethod; method to summarize multiple pieces
of information for a single object.  In the current example, we can
think of each linked object as a piece of information for the target
object, which we summarize by counting all such linked objects, once
again using the versatile &aggregateMethod; method.</para>

<para>The pieces of information we need&mdash;the different objects
linked to our target node&mdash;are contained in the links NST.

<programlisting><userinput> printNST(prox.linkNST)
</userinput></programlisting>

<screen>[SHOWING head,link_id,o1_id,o2_id WHERE * LIMIT *]
[ 1@0,    1@0,    1@0,    3@0     ]
[ 2@0,    2@0,    2@0,    3@0     ]
[ 3@0,    3@0,    2@0,    4@0     ]
[ 4@0,    4@0,    1@0,    2@0     ]
[ 5@0,    5@0,    2@0,    1@0     ]
</screen></para>

<para>The links NST contains one row per link.  To get the degree of
an object, we need to count the number of rows that show that object
as the start node for a link (rows having the target object ID in the
<token role="column">o1_id</token> column) and add that to
the number of rows that show that object as the terminating node for a
link (rows having the target object ID in the
<token role="column">o2_id</token> column).</para>

<para>We can accomplish this more easily by employing a neat trick
involving adding inverse &ldquo;links&rdquo; to our link data.
(Because these inverses are not added to the links NST, they are not
actually added to the database.) First, we create an NST that contains
the inverses of all the links in the database.

<programlisting><userinput> inverseLinks = prox.linkNST.project("o2_id, o1_id")
 printNST(inverseLinks)
</userinput></programlisting>

<screen>[SHOWING head,o2_id,o1_id WHERE * LIMIT *]
[ 1@0,    3@0,    1@0     ]
[ 2@0,    3@0,    2@0     ]
[ 3@0,    4@0,    2@0     ]
[ 4@0,    2@0,    1@0     ]
[ 5@0,    1@0,    2@0     ]
</screen></para>

<para>Then we create an NST that combines the actual link data with the
data from the inverse-link NST we just created.  (The steps to create
the <token role="table">biDirLinks</token> NST have been broken up
into two lines for clarity and formatting purposes; you can string the
method calls together on one line if you prefer.)

<programlisting><userinput> biDirLinks = prox.linkNST.project("o1_id, o2_id")
 biDirLinks.insertRowsFromNST(inverseLinks)
 printNST(biDirLinks)
</userinput></programlisting>

<screen>[SHOWING head,o1_id,o2_id WHERE * LIMIT *]
[ 1@0,    1@0,    3@0     ]
[ 2@0,    2@0,    3@0     ]
[ 3@0,    2@0,    4@0     ]
[ 4@0,    1@0,    2@0     ]
[ 5@0,    2@0,    1@0     ]
[ 6@0,    3@0,    1@0     ]
[ 7@0,    3@0,    2@0     ]
[ 8@0,    4@0,    2@0     ]
[ 9@0,    2@0,    1@0     ]
[ 10@0,   1@0,    2@0     ]
</screen></para>

<para>Now we can aggregate over the IDs in the
<token role="column">o1_id</token> column to get a total count of links
going out of or into each object.  That is, we group on
<token role="column">o1_id</token> and count the number of
(non-distinct) <token role="column">o2_id</token> values for each
value of <token role="column">o1_id</token>.

<programlisting><userinput> degreeNST = biDirLinks.aggregate("count", "o1_id", "o2_id")
 printNST(degreeNST)
</userinput></programlisting>

<screen>[SHOWING head,o1_id,o2_id WHERE * LIMIT *]
[ 0@0,    1@0,    3     ]
[ 1@0,    2@0,    4     ]
[ 2@0,    3@0,    2     ]
[ 3@0,    4@0,    1     ]
</screen></para>

<para>The &aggregateMethod; method reuses the column names specified
in the method call.  Thus, the column containing the group
identifier is labeled <token role="column">o1_id</token> and the
column containing the counts is labeled 
<token role="column">o2_id</token>.  Note that the <code>count</code>
operator gives us a count of <emphasis>all</emphasis> linked objects,
not of distinct linked objects.</para>

<para>The resulting NST contains the data we want to use for the new
degree attribute.  As we saw in the recipe 
<xref linkend="recipe_attrsfromdata" />, we just need to rename
the columns of the NST so that they
have the expected names <token role="column">id</token> and
<token role="column">value</token>, then use that NST to
define the values for the new <token role="attr">degree</token>
attribute.

<programlisting><userinput> objectAttrs = prox.objectAttrs
 degreeNST.renameColumns("id, value")
 objectAttrs.defineAttributeWithData("degree", "int", degreeNST)
</userinput></programlisting>
</para>

</section>

<!-- ============================================================== -->
<!-- DISCUSSION                                                     -->
<!-- ============================================================== -->

<section>
<title>Discussion</title>

<para>There are many variations on simple degree that we might find
useful in developing models.  Calculating these values involve simple
modifications to the above procedure.</para>

<!-- .............................................................. -->
<!--                   Degree for selected links                    -->
<!-- .............................................................. -->

<?pagebreak?>
<section>
<title>Degree for selected links</title>

<para>Sometimes we might want to limit our degree calculations to
include only links of a specified type.  Suppose we only wanted to
know the degree of <token role="attr">ActedIn</token> links.  To get
this value we limit the links included in the bi-directional NST to
those of the specified type.  We start by creating an  NST containing
all the links of the desired type.

<programlisting><userinput> actedInLinks = DB.getLinks("linktype = 'ActedIn'")
 printNST(actedInLinks)
</userinput></programlisting>

<screen>[SHOWING head,link_id,o1_id,o2_id,linktype WHERE * LIMIT *]
[ 0@0,    1@0,    1@0,    3@0,    "ActedIn"    ]
[ 1@0,    2@0,    2@0,    3@0,    "ActedIn"    ]
[ 2@0,    3@0,    2@0,    4@0,    "ActedIn"    ]
</screen></para>

<para>Now create the inverse links and combine them with the links in
the <token role="table">actedInLinks</token> NST to obtain an NST of
all <token role="attr">ActedIn</token> links and their inverses.
Use this new bi-directional NST to calculate and define the degree
attribute as before.</para>

<!--
<programlisting><userinput> inverseActedInLinks = actedInLinks.project("o2_id, o1_id")
 biDirActedInLinks = actedInLinks.project("o1_id, o2_id")
 biDirActedInLinks.insertRowsFromNST(inverseActedInLinks)
</userinput></programlisting></para>

<para>Aggregate over the <token role="column">o1_id</token>, and use
the resulting NST to define your new attribute.

<programlisting><userinput> actedInDegree = biDirActedInLinks.aggregate("count", "o1_id", "o2_id")
 actedInDegree.renameColumns("id, value")
 objectAttrs.defineAttributeWithData("actedin-degree", "int", actedInDegree)
</userinput></programlisting>
-->

</section>

<!-- .............................................................. -->
<!--                  Degree for selected objects                   -->
<!-- .............................................................. -->

<section>
<title>Degree for selected objects</title>

<para>Similarly, we might only care about the degree of objects of a
specific type.  To limit our degree calculations to the specified
objects, we start by creating an NST that holds the IDs of the
objects that we&rsquo;re interested in, in this case, actors.

<programlisting><userinput> actorObjects = DB.getObjects("objtype = 'Actor'")
 printNST(actorObjects)
</userinput></programlisting>

<screen>[SHOWING head,id,objtype WHERE * LIMIT *]
[ 0@0,    1@0,    "Actor"    ]
[ 1@0,    2@0,    "Actor"    ]
</screen></para>

<para>Now we can join that NST with the (full) bi-directional link NST
we created earlier.  The join with the bi-directional links NST returns
rows where the originating object is an actor.

<programlisting><userinput> actorBiDirLinks = biDirLinks.join(actorObjects,"o1_id = id", "o1_id, o2_id")
</userinput></programlisting></para>

<!--
<para>Then aggregate over <token role="column">o1_id</token> in
<token role="table">actorBiDirLinks</token> to count the number of
rows for each actor ID.</para>
-->

<para>Note that this limits the objects for which we calculate
degree to <token role="object">Actor</token> objects but does not
similarly restrict the type of the linked objects.  If we wanted to
limit our degree calculations to only actor-to-actor links, we can do
so by joining the <token role="table">actorObjects</token> NST with the
links NST to create an NST where <token role="column">o2_id</token> only
contains actors, then using that in place of the links NST when
creating our bi-directional NST.</para>

<!--
<programlisting><userinput> linksToActors = prox.linkNST.join(actorObjects,"o2_id = id")
 inverseLinksToActors = linksToActors.project("o2_id,o1_id")
 a2ABiDirLinks = linksToActors.project("o1_id,o2_id")
 a2ABiDirLinks.insertRowsFromNST(inverseLinksToActors)
 a2ADegree = a2ABiDirLinks.aggregate("count","o1_id","o2_id")
</userinput></programlisting>
-->

</section>

<!-- .............................................................. -->
<!--                     In- or out-degree only                     -->
<!-- .............................................................. -->

<section>
<title>In- or out-degree only</title>

<para>We needed the trick of creating inverse &ldquo;links&rdquo;
above because we wanted to include both link directions in our degree
calculations.  But suppose we only care about the number of links
terminating at the target object (in degree) or the number of links
originating from the target object (out degree)?  This is even
simpler&mdash;we can skip creating the bi-directional NST and use the
links NST directly.</para>

<para>To calculate the out degree, we group on the originating object 
(<token role="column">o1_id</token>) and count the number rows for
each ID in <token role="column">o1_id</token>.

<programlisting><userinput> outDegree = prox.linkNST.aggregate("count", "o1_id", "o2_id")
 printNST(outDegree)
</userinput></programlisting>

<screen>[SHOWING head,o1_id,o2_id WHERE * LIMIT *]
[ 0@0,    1@0,    2    ]
[ 1@0,    2@0,    3    ]
</screen></para>

<para>And to get the in degree, we group on the terminating object
(<token role="column">o2_id</token>).

<programlisting><userinput> inDegree = prox.linkNST.aggregate("count", "o2_id", "o1_id")
 printNST(inDegree)
</userinput></programlisting>

<screen>[SHOWING head,o2_id,o1_id WHERE * LIMIT *]
[ 0@0,    3@0,    2    ]
[ 1@0,    4@0,    1    ]
[ 2@0,    2@0,    1    ]
[ 3@0,    1@0,    1    ]
</screen></para>

<para>We can now proceed as before by renaming the columns and using
&defineAttributeWithData; to create and populate the new
attribute.</para>

</section>

<!-- .............................................................. -->
<!--                    Degree for unique links                     -->
<!-- .............................................................. -->

<section>
<title>Degree for unique links</title>

<para>All the above examples count multiple links connecting objects
separately, but what if we want to instead count the number of unique
objects that an object is linked to?</para>

<para>The &aggregateMethod; method solves this nicely with the
<code>card</code> aggregation operator.  The <code>card</code>
operator counts the number of distinct values for a given group,
giving us exactly the values we want.

<programlisting><userinput> uniqueDegree = biDirLinks.aggregate("card", "o1_id", "o2_id")
</userinput></programlisting>
</para>

</section>
</section>

<!-- ============================================================== -->
<!-- SUPPORTING FILES                                                -->
<!-- ============================================================== -->

<section>
<title>Supporting Files</title>

<para>Download the following XML data file to create the database used
above to demonstrate this recipe:
<itemizedlist spacing="compact">
  <listitem>
    <para>Database:
     <filename><ulink url="&examplespath;DBManip_AddDegreeAttr_DB.xml">DBManip_AddDegreeAttr_DB.xml</ulink></filename></para>
  </listitem>
</itemizedlist>
</para>

<para>You may also want to examine the unit test file for this recipe at
<filename>&testpath;/cookbook/DegreeAttributeTest.java</filename>.</para>

</section>

<!-- === End of recipe ============================================ -->

</section>

<!--
  Local Variables:
  mode: sgml
  sgml-set-face: t
  sgml-indent-step: nil
  sgml-always-quote-attributes: t
  sgml-parent-document: ("ProxCookbook.xml" "chapter" "section")
  sgml-default-dtd-file:"../../DocBook.ced"
  End:
-->
